watch process stack, sampled at 1s intervals

Terminal - watch process stack, sampled at 1s intervals
watch -n 1 'pstack 12345 | tac'

 Every 1.0s: pstack 2558 | tac                      Thu Feb  5 12:04:57 2009

 #24 0x00000030fea1d8b4 in __libc_start_main () from /lib64/libc.so.6
 #23 0x0000000000412275 in Py_Main ()
 #22 0x00000000004a86e0 in PyRun_SimpleFileExFlags ()
 #21 0x00000000004a844e in PyRun_FileExFlags ()
 #20 0x00000000004872a2 in PyEval_EvalCode ()
 ...
 #3  0x00002b2368b40a3f in search_peptide () from /n/site/inst/Linux-x86_64/bioi
 #2  0x00002b2368b405f8 in choose_residue_mod ()
 #1  0x00002b2368b3ff86 in evaluate_peptide () from /n/site/inst/Linux-x86_64/bi
 #0  0x00002b2368b3f181 in score_spectrum () from /n/site/inst/Linux-x86_64/bioi

User: mkc
watch process stack, sampled at 1s intervals

This command repeatedly gets the specified process' stack using pstack
(which is an insanely clever and tiny wrapper for gdb) and displays it
fullscreen. Since it updates every second, you rapidly get an idea of
where your program is stuck or spending time.

The 'tac' is used to make the output grow down, which makes it less jumpy.
If the output is too big for your screen, you can always leave the 'tac'
off to see the inner calls. (Or, better yet--get a bigger screen.)

Caveats: Won't work with stripped binaries and probably not well with
threads, but you don't want to strip your binaries or use threads anyway.


This sounds very neat, but I can't find a copy of pstack for Mac OS X.
Anyone know of one?

Comment by DEinspanjer 85 weeks and 6 days ago

AFAIK, it's just a gdb script, so it shouldn't be OS-specific, though
perhaps it would have to be tweaked slightly to work on OSX. Not sure
where the canonical version is, but Debian seems to be getting it from
RedHat.

Comment by mkc 85 weeks and 6 days ago

ubuntu pstack seems not work, gdb alias is:

gdb -ex "set pagination 0" -ex "thread apply all bt" --batch -p

Comment by unixmonkey3150 79 weeks and 4 days ago


Display environment vars only, using set

alias sete='set|sed -n "/^`declare -F|sed -n "s/^declare -f \(.*\)/\1
()/p;q"`/q;p"'

BASH=/bin/bash
BASH_ARGC=()
BASH_ARGV=()
BASH_LINENO=()
BASH_SOURCE=()
BASH_VERSINFO=([0]="3" [1]="2" [2]="25" [3]="1" [4]="release" [5]="i686-redhat-linux-gnu")
BASH_VERSION='3.2.25(1)-release'
BKDIR=/home/askapache/.bk
BROWSER=/usr/bin/lynx
COLORS=/home/askapache/.dircolors
COLUMNS=271
CR=$'\E[m\017\E)0'
CVS_RSH=ssh
DIRSTACK=()
EDITOR=/usr/bin/vim
EUID=32011
GREP_OPTIONS='-D skip --binary-files=without-match'
GROUPNAME=askapache
GROUPS=()

Normally the bash builtin command 'set' displays all vars and functions.
This just shows the vars. Useful if you want to see different output then
env or declare or export.

Alias 'sete' shows sets variables

alias sete='set|sed -n "/^`declare -F|sed -n "s/^declare -f \(.*\)/\1
()/p;q"`/q;p"'

Alias setf shows the functions.

alias setf='set|sed -n "/^`declare -F|sed -n "s/^declare -f \(.*\)/\1
()/p;q"`/,\$p"'

What others think

Just thinking how is this different from:

env

OK, did not notice your work on 'setf' before.

There seems no built-in alternative to 'setf' though.

It's much different than env, thats odd if sete and env are displaying the
exact same environment.

Thats because env is a command, usually in /bin/env or /usr/bin/env so it
is executed like any other executable, by calling execve with the current
environment, but not the bash environment, whereas set is a shell builtin
which shows all the bash internal variables and the current executing
environment of bash.

For example, do a

cat /proc/$$/environ

On my machine, env does not show the following vars that sete shows:

BASH BASH_ARGC BASH_ARGV BASH_LINENO BASH_SOURCE BASH_VERSINFO
BASH_VERSION COLUMNS DIRSTACK EUID GROUPS HOSTTYPE IGNOREEOF INTERACTIVE
LINES LOGIN_SHELL MACHTYPE MAILCHECK OPTERR OPTIND OSTYPE PPID PS2 PS3 PS4
SECONDS SHELLOPTS SOURCED UID

cat /proc/$$/environ

vs:

cat /proc/$PPID/environ

or with strace you can compare:

strace -v -f -e trace=execve /bin/env

and stracing bash is harder, but:

strace -v -f -e trace=execve /bin/bash -i -l -c 'set'

Function to split a string into an array

read -a ARR <<<'world domination now!'; echo ${ARR[2]};

read -a ARR <<<'world domination now!'; echo ${ARR[2]};
now!

IFS=":" read -a ARR <<<"$PATH"; echo ${ARR[2]};
/usr/local/bin

Alternatives

There are 2 alternatives - vote for the best!

Terminal - Alternatives
Split() { eval "$1=( \"$(echo "${!1}" | sed "s/$2/\" \"/g")\" )"; }

Example usage :
$ TEST="jhfz:lkhf :lhf:h0258:r"
$ Split TEST ":"
$ echo ${TEST[@]}
"jhfz" "lkhf " "lhf" "h0258" "r"

It works as a method applicated to a variable, converts the string
variable into an array

Split() { SENT=${*} ; sentarry=( ${SENT} ) ; while [[ ${#sentarry[@]} -gt
0 ]] ; do printf "%s\n" "${sentarry[0]}" ; sentarry=( ${sentarry[@]:1} ) ;
done ; }

What others think

Good one !

it works with a variable within double quotes like :

V='world domination now!' read -a ARR <<<"$V"; echo ${ARR[2]};

And the separator can be changed (to ':') this way:

IFS=':' read -a ARR <<<"$V"; echo ${ARR[2]};

have you by chance seen the "sample output"?

Remove everything except that file

Terminal - Remove everything except that file
( shopt -s extglob; rm !(<PATTERN>) )

User: sputnick
Remove everything except that file

Remove everything except that file with shell tricks inside a subshell to
avoid changes in the environment.

help shopt



rm !(*.foo|*.bar|*.baz)

 Example: rm !(*.tex|*.pdf) deletes all except the tex and pdf files.

User: hutch
Delete all files in a folder that don't match a certain file extension

Deletes all files in a folder that are NOT *.foo, *.bar or *.baz files.
Edit the pattern inside the brackets as you like.

rm -f !(survivior.txt)

User: RanyAlbeg
Remove all but one specific file
find . ! -name <FILENAME> -delete

User: haplo
Remove everything except that file

it will remove everything except the file names matching you can use also
use wildcards

ls | egrep -v "[REGULAR EXPRESSION]" | xargs rm -v

User: Saxphile
Remove everything except that file

This is a slight variation of an existing submission, but uses regular
expression to look for files instead. This makes it vastly more versatile,
and one can easily verify the files to be kept by running ls | egrep
"[REGULAR EXPRESSION]"

find . -type f ! -name "*.foo" -name "*.bar" -delete

 enki 13:09:08 /tmp/foo/bar $ find . ! -name "*.xml" ! -name "*.js" -type f -delete
 enki 13:12:23 /tmp/foo/bar $

User: sh1mmer
Delete all files in a folder that don't match a certain file extension

This command is recursive and will delete in all directories in ".". It
will find and delete all files not specified with ! -name "pattern". In
this case it's file extensions. -type f means it will only find files and
not directories. Finally the -delete flag ask find to delete what it
matches. You can test the command by running it first without delete and
it will list the files it will delete when you run it.


